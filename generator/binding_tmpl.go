package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _generator_tmpl_binding_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xdf\x6f\xda\xba\x17\x7f\xe7\xaf\xf0\xaa\xaa\x0a\x1d\x5f\xb6\x67\xbe\xb7\x0f\x8c\x66\x6d\x34\x2e\xb0\x26\x5d\x35\x4d\xd3\x64\x82\x69\xa3\x86\x84\x25\xa6\x1b\x8a\xf8\xdf\xef\xb1\x63\x13\xc7\x71\x28\x14\x2a\xdd\x5d\xe1\x97\x86\xe4\xf8\xfc\xf8\x9c\x8f\x7f\x1d\xf7\xdd\x3b\xe4\x5d\x3b\x2e\xfa\xe8\xf4\x6d\x74\xd7\x75\x51\xf7\xd6\x1b\x5e\xd9\x03\xfb\xa6\xeb\xd9\x97\xe8\x7f\xa8\x3b\xf8\x8a\xec\x4b\xc7\x73\x91\x37\xcc\x45\xef\x9c\x7e\x1f\x7d\xb0\x51\x7f\xe8\x7a\xe8\xee\xda\x1e\x20\xc7\x43\xf0\xfe\xc6\x5e\xf7\x6b\x80\xda\x42\xc9\xad\xeb\x0c\xae\xd0\x27\xfb\xab\x3b\xea\xf6\x6c\x94\x65\xa8\x3d\x4a\xe2\x27\x12\xe1\xc8\x27\xed\x4f\x64\x99\xce\xb1\x4f\xd0\x6a\xc5\xba\x75\x3d\x5d\xc0\x0b\x66\x24\xa5\x78\x36\x07\x09\xa1\xcb\xff\x19\xfa\xe8\x8b\x7d\xe3\x3a\xc3\x81\x2e\xfe\x85\x24\x69\x10\x47\x52\xdd\x55\xd7\x19\x80\x9f\xd7\xcc\x59\xe7\x52\x17\xbe\x8e\x53\xea\x4c\x98\x62\xcb\xb5\x6f\x40\x63\x9d\x56\x97\x24\x4f\x24\xb9\x21\x21\xc1\x29\x73\xb5\xc9\x94\xf7\xfa\x8e\x3d\xf0\xd0\xc0\xbe\x1a\x7a\x0e\x0f\xb5\xf7\xb9\x5f\xa7\x61\x40\xee\x63\x1a\x60\x4a\x26\x4c\x48\xb1\xe8\xde\x8e\x46\xc3\x1b\x00\xf8\x76\xc4\x30\x36\x1a\xce\xbb\x34\x1b\x0d\xf8\x7a\x9a\x2e\x67\xe3\x38\x4c\x51\xe7\x02\xb5\x87\x73\x0a\xc1\xa6\x6d\x57\xbc\x83\xa8\x99\xc8\xa3\x04\x95\xc9\xd4\x80\xdd\x80\x87\x47\x7c\x4f\xb8\x45\xa9\x67\x24\xde\xb1\xef\xc1\x6c\x1e\x27\x14\x59\x0d\x04\x2d\xcb\x12\x1c\xc1\x87\xd3\x1f\x2d\x74\x3a\xc7\xf4\x81\xab\x76\xb8\x48\x0a\xd2\x48\xb4\x93\x2c\xe3\x9f\x57\xab\x13\xd1\x8f\x44\x13\xf8\x0e\xbe\xfb\x60\x40\xaa\x83\x80\x7a\x3f\x24\x52\x17\xac\x57\x4d\x12\x4f\x1a\x3c\x6a\xc5\xb8\x3f\xe5\xa6\x3d\x3c\x0e\x09\xb3\x2c\xcc\xa0\x53\x97\x26\x0b\x9f\x7a\xcb\x39\x0f\x3b\x8d\xf0\x23\xf1\xe2\x1e\x9e\x91\x90\x75\x6a\x0f\xe0\x09\x15\xf2\xaa\xc6\x38\x64\x3d\x98\x50\x2f\x0e\x17\xb3\x48\x0d\x88\x69\x86\xb7\x1b\x95\xc7\xe1\x5a\xbb\xda\xed\xf3\x02\x87\xc1\x34\x80\x8c\x57\xfa\xcf\x93\x20\xa2\x25\x97\x35\x23\x8a\x2a\xca\x7e\x03\xac\x66\x75\xab\x55\xee\x33\x4a\xf9\xab\x6c\xdd\x4d\x78\x11\x4c\x51\xba\x98\xf3\x34\xf5\xc2\x45\x4a\x09\x58\xbe\xcf\x63\x56\x6c\xb0\x36\x21\xa9\x8f\xc6\x71\x1c\xea\x2a\x20\x83\xaa\xac\x80\x90\xb5\xe9\x22\xf2\x91\x35\x46\xe7\x5b\xf8\xd7\x44\xf9\x03\x43\xca\x6a\x32\x77\x99\x23\x65\x7f\x13\x42\x17\x49\xc4\x49\x24\x41\x95\x44\xd2\x2c\xe7\x91\x05\x69\x3f\x48\x05\x7e\x22\xa2\x92\xbe\xdd\xfc\x93\xba\xc0\x3b\x36\xc3\x08\x32\x68\x2e\x2a\x6e\x9e\x6d\x48\xb2\x54\x9b\x95\x31\x2e\x47\x20\x80\x7d\x21\x9c\x5e\x6c\x3d\xe1\x70\x41\xd0\x79\x96\xf1\x87\x35\x0e\x30\x55\xa8\x11\x7c\x08\xa2\x49\x2d\xd6\x55\xb9\x2c\xff\xd5\x41\xe3\x16\xfa\xc2\xf4\x76\x10\x57\x6f\x64\x40\x9e\x87\x07\x9c\xba\x04\xc6\xf7\x04\x27\x4b\x27\x9a\x90\xdf\x46\x82\xed\x16\x9e\xfd\x53\x84\xb7\x21\x3a\xf0\x97\xcd\x5b\x86\x14\xf9\xb9\x1a\x18\x6b\x67\xcf\x1a\xd3\x72\xc4\xda\x58\x40\x06\xfd\x37\x00\x94\x1b\xa9\x43\xc9\x0c\xb4\x70\x39\x13\xba\x3a\xd2\x54\x0b\x8d\x12\x32\x09\x7c\x58\x21\x3a\xb9\xac\xfd\x73\xfd\x46\x27\xd1\x06\x0e\xc9\x81\xd1\x8b\x17\x11\x0c\x76\x01\xe7\xfe\xe9\xe8\xe1\xc8\x89\xfc\x84\xcc\x48\x44\x61\x80\xb0\x79\xa2\x7e\x64\x80\x02\xb2\xc1\xe5\x30\x25\xba\x33\xe5\x99\x6a\x84\x13\xca\x61\xaa\x9b\xab\x8a\x2e\x51\x0c\x6b\x8a\x99\x7f\x4d\x53\xaf\xdd\x23\xdf\x8f\x88\xb2\xed\x49\x48\xd9\x0e\x49\x4c\x2d\x69\x87\x23\xa8\x6c\xc6\x9c\x69\xab\xc9\xcb\x72\xb2\x26\xc8\x87\xe5\xb3\xb3\xb5\x12\xe2\xb8\xf2\xb1\x8e\x56\xb0\xb2\xe0\x94\xf6\x62\xd8\xe0\x44\x84\x2d\xd5\x8c\x84\x6c\xef\x71\x10\x4a\x39\x91\xa0\x54\xbb\xdd\x3e\xb2\xaa\xcc\x2a\x27\x3a\x10\xab\x6a\xdf\x6e\xde\x12\xed\xc9\x4c\xa1\xf1\x2e\xa0\x0f\x75\xbb\x1c\x0d\xa1\x71\x5b\xdd\x18\x19\x18\xba\xa7\x47\x97\xb0\xaf\x5b\x0f\x92\xdc\x3b\x2e\xfc\xec\x68\xd9\x82\x52\x6c\xcf\xd8\xe1\xd3\x7d\x35\x2b\x7b\x3b\xee\xa4\xcc\x75\xc2\x79\x52\xbf\xe4\x94\x90\x64\xfe\x6c\xe3\xc8\x71\xed\xf8\x93\xd7\x8e\xe3\x9c\x8d\xfe\x5d\xd9\x3c\xd8\x9c\xbd\x7b\x5a\xae\xe8\xbe\x23\xec\x00\xf9\x38\x74\x2e\x5e\x9a\x87\x2b\xba\x21\x0f\x7b\x23\x4d\x8e\x48\x17\x48\x93\x57\x44\xba\x7f\xe4\x74\x81\x74\xff\x35\x39\xdd\x3f\x72\x5a\x41\x7a\x7b\x4e\x57\x67\x6f\x6d\x75\x96\x75\x5f\xfe\x43\x56\x30\x55\x44\x44\xbd\x52\x41\x75\xfb\x9a\x6c\x2e\x6d\x2e\xc2\x82\xe6\x6a\x2e\x15\x1b\xb9\x5b\x79\x44\x3b\x96\x82\x73\x6a\xa5\x39\xb5\xd4\x58\x9a\x1b\xbc\xe1\xe9\xb2\x9a\x06\xa7\xcc\xf5\xb8\xb4\x5d\xaf\xab\x51\x4e\xc6\xb3\x18\x5f\x92\xe9\xfe\x30\xd3\xf8\x76\x3e\x27\x89\x86\x70\xce\xc6\xa2\xf2\xaa\x6d\xb3\x0c\x38\x73\xf4\x18\x09\x35\x27\xad\x00\x0e\x24\xe8\xfc\x3e\x06\x0e\xb6\x1d\x78\x6e\x22\xeb\xdb\x77\x4d\xa8\x85\x48\x92\xc4\xf0\xa9\x88\x03\x27\x09\x5e\x32\xe7\x67\x00\x96\xa9\xc7\xfb\xe2\x2c\x05\x9d\x99\xe4\xdf\x78\x6e\x32\xde\xe2\xbe\x59\xb4\x9a\x56\x8b\x9d\x39\x0c\xb6\x0b\xfb\x17\x08\x03\x3a\xd1\xc4\xe2\x3f\x5b\x88\x36\x4d\x49\x65\x07\xa4\x16\x8a\x82\xa2\xb4\xbe\x2a\xe4\x84\x8c\x50\x00\xb6\x2a\xa8\xd5\xf8\xad\x82\xd6\x42\x3e\x0e\xc3\x31\xf6\x1f\xb7\x0b\xa6\x99\xff\x55\x62\xca\x33\xca\xaf\x95\x98\x72\xc9\x07\xe5\x44\x9a\xc4\xbf\x14\xbc\x03\x56\x5e\x9c\x62\x9f\x64\x80\x75\x48\x22\x4b\x28\x68\x36\x95\x82\x76\xc9\x02\xa7\x29\xd3\xa0\xb9\x96\xe9\x55\x7b\xe8\x15\x30\xb9\xf7\xff\x87\xbf\x7f\x95\x94\xc3\x9b\xb7\x6f\x0d\x53\x71\xfa\x2b\xa0\xfe\x83\x0c\xe2\x5b\xf0\x3d\xbf\x91\xa9\x0a\xee\x46\xff\x35\x38\xec\xda\x4f\xbb\x96\xe8\x30\x40\xc0\x12\x70\xe0\x8c\x6e\x33\x6a\x0b\x17\x8a\xc1\xa1\xb6\x09\x99\xe2\x45\x48\x3b\x46\x0f\xc2\xf8\xbe\xfd\x11\x53\x1c\x5a\x27\x8b\xe8\x01\x47\x93\x90\x4c\x44\xb8\x1d\x74\xd2\xd2\x23\x37\xd5\x11\xea\x7f\xc1\xe1\xe9\x0d\x4f\xba\xeb\xe3\xc8\x82\xb0\xe0\x8c\xa3\xf3\x9d\xb5\x71\x42\xf0\x63\xdd\x85\x06\x6b\xf0\x7d\x32\x20\xbf\x69\x4b\x0e\x39\xc9\x4a\x4b\x1b\x18\x60\x91\x49\xbc\xb9\x60\xa3\xa2\xbe\x90\x2c\x47\x43\xbd\xdb\xd2\x62\xbd\x0e\x75\xd8\x95\x75\x28\xce\x6b\xb2\xc5\xb5\x62\xb5\x98\xfe\x11\xcf\x82\x70\xa9\xcf\x78\xb5\x8b\x03\x9b\x84\x59\x2d\x43\xe8\xe0\xf7\x96\xe6\x6a\x86\xa9\x78\x2e\x67\x7a\x5e\x34\xdf\xde\x9c\x2b\xea\x5b\xb7\xf3\x94\x24\x35\xf5\xfa\xcd\xe6\x94\xb5\xfc\x19\x5b\x3c\xa2\xba\x5b\x3d\xf5\x46\x6f\x5a\xba\xd0\xdb\x4e\xb9\xbc\xb1\x7e\x46\xb7\xbc\xf0\xde\x4d\x39\x5b\x8d\xac\xa7\xea\x4c\xc9\x77\x43\x3c\xac\xea\xd5\x99\x2f\xae\xde\xbf\x7d\x37\xec\xd5\x5e\xbc\xc8\xbe\xe8\x8e\x59\x76\x3d\xd0\x3d\x33\x8f\xae\x7e\xff\xb9\xdd\x6d\x67\xb1\x3f\xdd\x30\x23\xae\x5a\xc6\x8d\x42\x41\x40\x25\xbb\x95\x5c\x64\xfc\x07\xf7\x47\x4f\x29\x33\x2f\x10\xe6\xfb\xe5\xb4\xba\x01\xd9\x40\xe3\x18\xa8\x70\x7e\xe4\xc2\x2b\x70\xe1\xec\x8f\x23\x43\xde\x11\x9e\x83\x88\x9f\x9e\x60\x1b\x54\xce\x72\x75\x1a\x2a\x7d\xd6\xff\x0d\x63\xd7\x3d\xc7\x1e\x2c\x78\x05\x26\xb0\xb6\x65\xca\xb5\xb8\x4d\xf9\x54\x33\xa0\x81\xcf\xb3\x09\xa8\x03\xda\xfa\x48\x64\x79\xa9\x60\x6e\x4a\xfb\x7f\x0e\x79\xf3\x11\x6c\xeb\x41\xb8\x7d\x46\xf2\xdd\xce\xfa\xff\xcb\x14\xb1\x27\x9c\x94\xdc\x90\x2b\x39\xaa\xec\xe5\x8b\x0c\x9a\x76\x12\x7f\xd2\xbf\x5d\xad\x67\x88\x2a\xc7\x9a\x06\xf7\x24\xe2\xfc\xa8\x6f\x3e\x1d\x9b\xf7\x5f\x3b\xfe\x17\x91\x76\xf4\x17\x0f\xff\x04\x00\x00\xff\xff\x96\x1d\x87\x6d\xc8\x29\x00\x00")

func generator_tmpl_binding_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_generator_tmpl_binding_tmpl,
		"generator/tmpl/binding.tmpl",
	)
}

func generator_tmpl_binding_tmpl() (*asset, error) {
	bytes, err := generator_tmpl_binding_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "generator/tmpl/binding.tmpl", size: 10696, mode: os.FileMode(420), modTime: time.Unix(1430672018, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/binding.tmpl": generator_tmpl_binding_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"generator": &_bintree_t{nil, map[string]*_bintree_t{
		"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
			"binding.tmpl": &_bintree_t{generator_tmpl_binding_tmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

